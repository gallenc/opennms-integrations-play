/*******************************************************************************
 * This file is part of OpenNMS(R).
 *
 * Copyright (C) 2019 The OpenNMS Group, Inc.
 * OpenNMS(R) is Copyright (C) 1999-2019 The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * OpenNMS(R) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with OpenNMS(R).  If not, see:
 *      http://www.gnu.org/licenses/
 *
 * For more information contact:
 *     OpenNMS(R) Licensing <license@opennms.org>
 *     http://www.opennms.org/
 *     http://www.opennms.com/
 *******************************************************************************/

package org.opennms.netmgt.alarmd.drools;

import java.util.Date;
import org.kie.api.time.SessionClock;
import org.opennms.netmgt.model.OnmsAlarm;
import org.opennms.netmgt.model.OnmsSeverity;
import org.opennms.netmgt.model.TroubleTicketState;

import org.opennms.netmgt.model.events.EventBuilder;
import org.opennms.netmgt.xml.event.AlarmData;
import org.opennms.netmgt.alarmd.drools.AlarmService;
import org.opennms.netmgt.model.OnmsEventParameter;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map.Entry;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

global org.opennms.netmgt.alarmd.drools.AlarmService alarmService;

declare org.opennms.netmgt.model.OnmsAlarm
    @role(event)
    @timestamp(lastUpdateTime)
end

declare GroupMap
  euiGroupMap : HashMap
end

rule "insert uei group map"   
    when
        eval( 1==1 )
    then
    
        GroupMap groupMap = new GroupMap();
        
        HashMap<String, String> euiGroupMap = new HashMap<String,String>();
        euiGroupMap.put("uei.opennms.org/traps/CHUBB-TVBS-CAMERA-MIB/healthChange/panMotor","group5");
        euiGroupMap.put("uei.opennms.org/traps/CHUBB-TVBS-CAMERA-MIB/healthChangeClear/panMotor-clear","group5");
        euiGroupMap.put("uei.opennms.org/traps/CHUBB-TVBS-CAMERA-MIB/healthChange/tiltMotor","group5");
        euiGroupMap.put("uei.opennms.org/traps/CHUBB-TVBS-CAMERA-MIB/healthChangeClear/tiltMotor-clear","group5");
        euiGroupMap.put("uei.opennms.org/traps/CHUBB-TVBS-CAMERA-MIB/healthChange/zoomMotor","group5");
        euiGroupMap.put("uei.opennms.org/traps/CHUBB-TVBS-CAMERA-MIB/healthChangeClear/zoomMotor-clear","group5");
        euiGroupMap.put("uei.opennms.org/traps/CHUBB-TVBS-CAMERA-MIB/healthChange/apertureMotor","group5");
        euiGroupMap.put("uei.opennms.org/traps/CHUBB-TVBS-CAMERA-MIB/healthChangeClear/apertureMotor-clear","group5");
        euiGroupMap.put("uei.opennms.org/traps/CHUBB-TVBS-CAMERA-MIB/healthChange/focusMotor","group5");
        euiGroupMap.put("uei.opennms.org/traps/CHUBB-TVBS-CAMERA-MIB/healthChangeClear/focusMotor-clear","group5");
        euiGroupMap.put("uei.opennms.org/traps/CHUBB-TVBS-CAMERA-MIB/healthChange/wiperMotor","group6");
        euiGroupMap.put("uei.opennms.org/traps/CHUBB-TVBS-CAMERA-MIB/healthChangeClear/wiperMotor-clear","group6");
        euiGroupMap.put("uei.opennms.org/traps/CHUBB-TVBS-CAMERA-MIB/healthChange/heater","group6");
        euiGroupMap.put("uei.opennms.org/traps/CHUBB-TVBS-CAMERA-MIB/healthChangeClear/heater-clear","group6");
        euiGroupMap.put("uei.opennms.org/traps/CHUBB-TVBS-CAMERA-MIB/healthChange/fluidLevel","group6");
        euiGroupMap.put("uei.opennms.org/traps/CHUBB-TVBS-CAMERA-MIB/healthChangeClear/fluidLevel-clear","group6");
        euiGroupMap.put("uei.opennms.org/traps/CHUBB-TVBS-CAMERA-MIB/healthChange/videoSignal","group4");
        euiGroupMap.put("uei.opennms.org/traps/CHUBB-TVBS-CAMERA-MIB/healthChangeClear/videoSignal-clear","group4");
        euiGroupMap.put("uei.opennms.org/traps/CHUBB-TVBS-CAMERA-MIB/healthChange/housingTamper","group6");
        euiGroupMap.put("uei.opennms.org/traps/CHUBB-TVBS-CAMERA-MIB/healthChangeClear/housingTamper-clear","group6");
        euiGroupMap.put("uei.opennms.org/traps/CHUBB-TVBS-CAMERA-MIB/healthChange/washerMotorFault","group6");
        euiGroupMap.put("uei.opennms.org/traps/CHUBB-TVBS-CAMERA-MIB/healthChangeClear/washerMotorFault-clear","group6");
        euiGroupMap.put("uei.opennms.org/traps/CHUBB-TVBS-CAMERA-MIB/healthChange/configPlugFault","group2");
        euiGroupMap.put("uei.opennms.org/traps/CHUBB-TVBS-CAMERA-MIB/healthChangeClear/configPlugFault-clear","group2");
        euiGroupMap.put("uei.opennms.org/traps/CHUBB-TVBS-CAMERA-MIB/healthChange/tvbuCameraCommsFault","group3");
        euiGroupMap.put("uei.opennms.org/traps/CHUBB-TVBS-CAMERA-MIB/healthChangeClear/tvbuCameraCommsFault-clear","group3");
        euiGroupMap.put("uei.opennms.org/traps/CHUBB-TVBS-CAMERA-MIB/healthChangeClear","group-undefined");
        euiGroupMap.put("uei.opennms.org/traps/CHUBB-TVBS-CAMERA-MIB/tamperDetectedCleared","group-undefined");
        euiGroupMap.put("uei.opennms.org/traps/CHUBB-TVBS-CAMERA-MIB/logicInputChange","group-undefined");
        euiGroupMap.put("uei.opennms.org/traps/CHUBB-TVBS-CAMERA-MIB/logicInputChangeCleared","group-undefined");
        euiGroupMap.put("uei.opennms.org/traps/CHUBB-TVBS-CAMERA-MIB/commsStateChange","group-undefined");
        euiGroupMap.put("uei.opennms.org/traps/CHUBB-TVBS-CAMERA-MIB/commsStateChangeClear","group-undefined");
        
        groupMap.setEuiGroupMap(euiGroupMap);
        
        insert ( groupMap );
     
        alarmService.warn( "inserted group map" );
end


rule "group mapping situation"
  no-loop
  when
    $sessionClock : SessionClock()
    $groupMap : GroupMap() 
    
    // get alarms which match the uei's in groupMap
    $alarm : OnmsAlarm(alarmType == OnmsAlarm.PROBLEM_TYPE,
                       lastEvent != null,
                       // match alarm if last event uei is in list of groups
                       $groupMap.euiGroupMap.keySet() contains lastEvent.eventUei
                      )

    // get groupMap entries where uei matches the alarm's uei
    // the map entry tells us which group the alarm is in. (each uei should only be in one group)
    $ueiGroups : LinkedList() from collect( Entry( key == $alarm.lastEvent.eventUei ) from $groupMap.euiGroupMap.entrySet() )
   
    // get any situations where node id and situationGroup matches the group for this alarm 
    // there can be only one uncleared of each situation group per node
    $situations : LinkedList() from collect ( OnmsAlarm( $eventParameters : eventParameters,
                   isSituation() == true, 
                   severity != OnmsSeverity.CLEARED,
                   nodeId == $alarm.nodeId,
                   ! ($ueiGroups == null),
                   ! $ueiGroups.isEmpty(),
                   findEventParameter(alarmService, "situationGroup", $ueiGroups , $eventParameters)
                  ) )

  then
  
  
    Date now = new Date(drools.getWorkingMemory().getSessionClock().getCurrentTime());
    
    // debugging messages - note change to alarmService.debug in production
    alarmService.warn("group mapping situation rule: matched alarm {}", $alarm);
    
    alarmService.warn("group mapping situation rule: ueiGroups size {}", $ueiGroups.size() );
    for (Object entry: $ueiGroups){
        Entry e = (Entry) entry;
        alarmService.warn("   group mapping situation rule: ueiGroups entry {}", entry);
    }
    
    alarmService.warn("group mapping situation rule: existing situations size {}", $situations.size() );
    for (Object onmsAlarmObject: $situations){
        OnmsAlarm situation = (OnmsAlarm) onmsAlarmObject;
        alarmService.warn("  group mapping situation rule: existing situation {}", situation);
    }
    // end of debugging messages
    
    // get the group which this alarm's uei is in
    String ueiGroup = "groupNotSet";
    if( $ueiGroups != null || ! $ueiGroups.isEmpty()){
       // get parameter value for group
       Entry e = (Entry) $ueiGroups.get(0);
       ueiGroup = (String) e.getValue();
    }

    // get any existing alarm reduction keys from any current matching situation
    // this allows us to re-inject the other matching alarms in the update event
    // assumes only one matching situation from rule
    Set<String> alarmReductionKeys= new HashSet<String>();
    
    OnmsSeverity maxSeverity= $alarm.getSeverity();
    String alarmReductionKey = $alarm.getReductionKey();
    boolean alarmInSituation = false;
    
    if (! $situations.isEmpty()) {
       OnmsAlarm matchedSituation = (OnmsAlarm) $situations.get(0);
       if(matchedSituation !=null){
           Set<OnmsAlarm> relatedAlarms = matchedSituation.getRelatedAlarms();
           if (relatedAlarms!=null) {
              // find maximum severity and add all current reduction keys
              for(OnmsAlarm related : relatedAlarms){
                  if (related.getSeverity().getId() > maxSeverity.getId() ) maxSeverity = related.getSeverity();
                  if (OnmsSeverity.CLEARED != related.getSeverity() ) {
                     alarmReductionKeys.add(related.getReductionKey());
                     alarmService.warn("  group mapping situation rule: adding reduction key from related alarm if not cleared {}", related);
                  }
              }
              // if this alarm is already a related alarm send an event
              for(OnmsAlarm related : relatedAlarms){
                  if(related.getId() == $alarm.getId()){
                      alarmInSituation = true;
                      alarmService.warn("  group mapping situation rule: bump situation to create event ", related);
                      alarmService.setSeverity(matchedSituation, maxSeverity, now);
                      break;
                  }
              }
              // delete situation immediately if reduction keys empty ( i.e. all cleared)
              if(alarmReductionKeys.isEmpty()){
                  alarmService.warn("  alarmreductionkeys all cleared. deleting situation {}", matchedSituation.getId());
                  alarmService.deleteAlarm(matchedSituation);
             }
           }
       }
    }
    
    // add reduction key from new alarm
    // dont send event if this alarm is already present in a situation (circular updates)
    // send event to update or create situation if this alarm is not in a situation
    // the situation is created with the severity one greater than in the creating alarm
    if(OnmsSeverity.CLEARED != $alarm.getSeverity() && ! alarmReductionKeys.contains(alarmReductionKey)) {
       //if(OnmsSeverity.CLEARED != $alarm.getSeverity()) alarmReductionKeys.add(alarmReductionKey);
       alarmReductionKeys.add(alarmReductionKey);
       Integer nodeId=$alarm.getNodeId();
       sendUdateSituationEvent(alarmService, nodeId, ueiGroup, alarmReductionKeys, maxSeverity);
    }
    
end

/* searchs eventParameters list and returns true if name key with value is found. returns false if inputs are null */
function boolean findEventParameter(AlarmService alarmService, String name, List ueiGroupsList, List eventParameters) {
    
    if( name == null || eventParameters==null || ueiGroupsList==null || ueiGroupsList.isEmpty()) return false;
        
    // get first named parameter value for group (there should only be one)
    Entry e = (Entry) ueiGroupsList.get(0);
    String value = (String) e.getValue();
    
    for (Object paramObj : eventParameters) {
        OnmsEventParameter param = (OnmsEventParameter) paramObj;
        
        if (name.equals(param.getName()) &&  value.equals( param.getValue()) ) {
          alarmService.warn("new alarm rule findEventParameter matched name "+param.getName()+" value "+param.getValue() );
          return true;
        }
    }
    return false;
}

// creates and sends a situation update event with the severity of the alarm raising the event
// see code in isRelatedReductionKeyWithContent(Parm param) in AlarmPersisterImpl to see how alarms are tagged as situations
// if any param with name beginning 'related-reductionKey' exists this is used to match the related alarm reduction keys and mark this alarm as a situation.
function void sendUdateSituationEvent(AlarmService alarmService, Integer nodeId, String ueiGroup, Set alarmReductionKeys, OnmsSeverity currentSeverity) {
        EventBuilder builder = new EventBuilder("uei.opennms.org/alarms/drools/situation", "drools");
        AlarmData data = new AlarmData();
        //data.setAlarmType(1); 
        // data.setReductionKey(reductionKey);
        //builder.setAlarmData(data);
        
        // set initial severity of drools situation one greater than alarm severity to avoid double events because of situation severity accumulation rules
        if(currentSeverity !=null) {
              // not sure how indeterminate will be handled in rules
              if(OnmsSeverity.INDETERMINATE == currentSeverity ){
                 builder.setSeverity(OnmsSeverity.CLEARED.getLabel());
              } else if(OnmsSeverity.CLEARED == currentSeverity ){
                 builder.setSeverity(OnmsSeverity.CLEARED.getLabel());
              } else {
                 int currentSeverityInt = currentSeverity.getId();
                 int newSeverity = (currentSeverityInt >= OnmsSeverity.CRITICAL.getId()) ? OnmsSeverity.CRITICAL.getId() : currentSeverityInt + 1;
                 builder.setSeverity(OnmsSeverity.get(newSeverity).getLabel());
              }
        }
        
        builder.setNodeid(nodeId);
        builder.setLogDest("logndisplay");
        builder.setLogMessage("updating situation");
        for (Object reduxObj : alarmReductionKeys) {
             String redux = (String) reduxObj;
            // TOOD revisit when event_parameters table supports multiple params with the same name (NMS-10214)
            // For now, suffix the parameter name with the value.
            builder.addParam("related-reductionKey-" + redux.hashCode(), redux);
        }
        builder.addParam("situationDescr","drools situation ueiGroup: "+ueiGroup);
        builder.addParam("situationLogMsg","drools situation");
        
        builder.addParam("situationGroup", ueiGroup);
        alarmService.warn("alarm service sending update situation event: {}", builder.getEvent());
        alarmService.sendEvent(builder.getEvent());
}
        

        
