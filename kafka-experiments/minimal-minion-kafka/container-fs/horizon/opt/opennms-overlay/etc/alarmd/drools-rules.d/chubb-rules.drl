/*******************************************************************************
 * This file is part of OpenNMS(R).
 *
 * Copyright (C) 2019 The OpenNMS Group, Inc.
 * OpenNMS(R) is Copyright (C) 1999-2019 The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * OpenNMS(R) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with OpenNMS(R).  If not, see:
 *      http://www.gnu.org/licenses/
 *
 * For more information contact:
 *     OpenNMS(R) Licensing <license@opennms.org>
 *     http://www.opennms.org/
 *     http://www.opennms.com/
 *******************************************************************************/

package org.opennms.netmgt.alarmd.drools;

import java.util.Date;
import org.kie.api.time.SessionClock;
import org.opennms.netmgt.model.OnmsAlarm;
import org.opennms.netmgt.model.OnmsSeverity;
import org.opennms.netmgt.model.TroubleTicketState;

import org.opennms.netmgt.model.events.EventBuilder;
import org.opennms.netmgt.xml.event.AlarmData;
import org.opennms.netmgt.alarmd.drools.AlarmService;
import org.opennms.netmgt.model.OnmsEventParameter;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

global org.opennms.netmgt.alarmd.drools.AlarmService alarmService;

declare org.opennms.netmgt.model.OnmsAlarm
    @role(event)
    @timestamp(lastUpdateTime)
end


rule "when an alarm changes"
  when
    $sessionClock : SessionClock()
    $alarm : OnmsAlarm(alarmType == OnmsAlarm.PROBLEM_TYPE,
                       lastEvent != null,
                       lastEvent.eventUei in ( "uei.opennms.org/traps/CHUBB-TVBS-CAMERA-MIB/tamperDetected", "uei.opennms.org/traps/CHUBB-TVBS-CAMERA-MIB/logicInputChange" )
                       )
    //$d1: ArrayList() from collect (DeptData(deptId == $e.EmpDept1))
    $situations : LinkedList() from collect ( OnmsAlarm( $eventParameters : eventParameters,
                   isSituation() == true, 
                   nodeId == $alarm.nodeId,
                   findEventParameter("situationGroup", "group1", $eventParameters)
    //               exists (OnmsEventParameter( name=="situationGroup", value == "group1" ) from $eventParameters)
   //                exists (OnmsEventParameter( ) from $eventParameters)
                  ) )
                  
   // $groups : LinkedList() from collect (  OnmsEventParameter( name=="situationGroup", value == "group1" ) from $situations )

   // $situation : OnmsAlarm( isSituation() == true, $relatedAlarmIds : relatedAlarmIds )
   // $relatedAlarms : LinkedList() from collect( OnmsAlarm($relatedAlarmIds contains id) )
  then
  
  
    Date now = new Date(drools.getWorkingMemory().getSessionClock().getCurrentTime());
    
    alarmService.warn("new alarm rule {}", $alarm);
    
    alarmService.warn("new alarm rule situations size {}", $situations.size() );
    for (Object onmsAlarmObject: $situations){
        OnmsAlarm situation = (OnmsAlarm) onmsAlarmObject;
        alarmService.warn("  new alarm rule situation {}", situation);
    }
    
    Integer nodeId=1;
    String reductionKey="xxx";
    String alarmReductionKey = $alarm.getReductionKey();
    List alarmReductionKeys= new ArrayList();
    alarmReductionKeys.add(alarmReductionKey);
    
   // sendUdateSituationEvent(alarmService, nodeId, reductionKey, alarmReductionKeys);
    
end

/* searchs eventParameters list and returns value or null if not found. returns null if inputs are null */

function boolean findEventParameter(String name, String value, List eventParameters) {
    if(eventParameters==null || value==null || name == null) return false;
    for (Object paramObj : eventParameters) {
        OnmsEventParameter param = (OnmsEventParameter) paramObj;
        if (name.equals(param.getName()) &&  value.equals( param.getValue()) ) {
         return true;
        }
    }
    return false;
}


function void sendUdateSituationEvent(AlarmService alarmService, Integer nodeId, String reductionKey, List alarmReductionKeys) {
        EventBuilder builder = new EventBuilder("uei.opennms.internal/updatesituation", "drools");
        AlarmData data = new AlarmData();
        data.setAlarmType(1);
        data.setReductionKey(reductionKey);
        builder.setAlarmData(data);
        builder.setSeverity(OnmsSeverity.MAJOR.getLabel());
        builder.setNodeid(nodeId);
        builder.setLogDest("logndisplay");
        builder.setLogMessage("updating situation");
        for (Object alarmObj : alarmReductionKeys) {
             String alarm = (String) alarmObj;
            // TOOD revisit when event_parameters table supports multiple params with the same name (NMS-10214)
            // For now, suffix the parameter name with the value.
            builder.addParam("related-reductionKey" + alarm, alarm);
        }
        alarmService.warn("alarm service sending updatesituation event: {}", builder.getEvent());
        alarmService.sendEvent(builder.getEvent());
}
        

        
